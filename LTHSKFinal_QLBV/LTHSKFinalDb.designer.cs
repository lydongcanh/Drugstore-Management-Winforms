#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LTHSKFinal_QLBV
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LTHSKFinalDb")]
	public partial class LTHSKFinalDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertSellReceipt(SellReceipt instance);
    partial void UpdateSellReceipt(SellReceipt instance);
    partial void DeleteSellReceipt(SellReceipt instance);
    partial void InsertMedicineDetail(MedicineDetail instance);
    partial void UpdateMedicineDetail(MedicineDetail instance);
    partial void DeleteMedicineDetail(MedicineDetail instance);
    partial void InsertMedicineInvoice(MedicineInvoice instance);
    partial void UpdateMedicineInvoice(MedicineInvoice instance);
    partial void DeleteMedicineInvoice(MedicineInvoice instance);
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    partial void InsertMedicineSupplier(MedicineSupplier instance);
    partial void UpdateMedicineSupplier(MedicineSupplier instance);
    partial void DeleteMedicineSupplier(MedicineSupplier instance);
    partial void InsertPatientPrescriptionMedicine(PatientPrescriptionMedicine instance);
    partial void UpdatePatientPrescriptionMedicine(PatientPrescriptionMedicine instance);
    partial void DeletePatientPrescriptionMedicine(PatientPrescriptionMedicine instance);
    partial void InsertPatientPrescription(PatientPrescription instance);
    partial void UpdatePatientPrescription(PatientPrescription instance);
    partial void DeletePatientPrescription(PatientPrescription instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertSellReceiptDetail(SellReceiptDetail instance);
    partial void UpdateSellReceiptDetail(SellReceiptDetail instance);
    partial void DeleteSellReceiptDetail(SellReceiptDetail instance);
    #endregion
		
		public LTHSKFinalDbDataContext() : 
				base(global::LTHSKFinal_QLBV.Properties.Settings.Default.LTHSKFinalDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LTHSKFinalDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LTHSKFinalDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LTHSKFinalDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LTHSKFinalDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<SellReceipt> SellReceipts
		{
			get
			{
				return this.GetTable<SellReceipt>();
			}
		}
		
		public System.Data.Linq.Table<MedicineDetail> MedicineDetails
		{
			get
			{
				return this.GetTable<MedicineDetail>();
			}
		}
		
		public System.Data.Linq.Table<MedicineInvoice> MedicineInvoices
		{
			get
			{
				return this.GetTable<MedicineInvoice>();
			}
		}
		
		public System.Data.Linq.Table<Medicine> Medicines
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
		
		public System.Data.Linq.Table<MedicineSupplier> MedicineSuppliers
		{
			get
			{
				return this.GetTable<MedicineSupplier>();
			}
		}
		
		public System.Data.Linq.Table<PatientPrescriptionMedicine> PatientPrescriptionMedicines
		{
			get
			{
				return this.GetTable<PatientPrescriptionMedicine>();
			}
		}
		
		public System.Data.Linq.Table<PatientPrescription> PatientPrescriptions
		{
			get
			{
				return this.GetTable<PatientPrescription>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<SellReceiptDetail> SellReceiptDetails
		{
			get
			{
				return this.GetTable<SellReceiptDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _FullName;
		
		private string _PhoneNumber;
		
		private string _Gender;
		
		private System.DateTime _BirthDate;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<SellReceipt> _SellReceipts;
		
		private EntitySet<MedicineInvoice> _MedicineInvoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Employee()
		{
			this._SellReceipts = new EntitySet<SellReceipt>(new Action<SellReceipt>(this.attach_SellReceipts), new Action<SellReceipt>(this.detach_SellReceipts));
			this._MedicineInvoices = new EntitySet<MedicineInvoice>(new Action<MedicineInvoice>(this.attach_MedicineInvoices), new Action<MedicineInvoice>(this.detach_MedicineInvoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SellReceipt", Storage="_SellReceipts", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<SellReceipt> SellReceipts
		{
			get
			{
				return this._SellReceipts;
			}
			set
			{
				this._SellReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_MedicineInvoice", Storage="_MedicineInvoices", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<MedicineInvoice> MedicineInvoices
		{
			get
			{
				return this._MedicineInvoices;
			}
			set
			{
				this._MedicineInvoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SellReceipts(SellReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_SellReceipts(SellReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_MedicineInvoices(MedicineInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_MedicineInvoices(MedicineInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SellReceipts")]
	public partial class SellReceipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private System.DateTime _CreationDate;
		
		private string _PatientId;
		
		private string _EmployeeId;
		
		private EntitySet<SellReceiptDetail> _SellReceiptDetails;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnPatientIdChanging(string value);
    partial void OnPatientIdChanged();
    partial void OnEmployeeIdChanging(string value);
    partial void OnEmployeeIdChanged();
    #endregion
		
		public SellReceipt()
		{
			this._SellReceiptDetails = new EntitySet<SellReceiptDetail>(new Action<SellReceiptDetail>(this.attach_SellReceiptDetails), new Action<SellReceiptDetail>(this.detach_SellReceiptDetails));
			this._Employee = default(EntityRef<Employee>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="NVarChar(128)")]
		public string PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="NVarChar(128)")]
		public string EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellReceipt_SellReceiptDetail", Storage="_SellReceiptDetails", ThisKey="Id", OtherKey="SellReceiptId")]
		public EntitySet<SellReceiptDetail> SellReceiptDetails
		{
			get
			{
				return this._SellReceiptDetails;
			}
			set
			{
				this._SellReceiptDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SellReceipt", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SellReceipts.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SellReceipts.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_SellReceipt", Storage="_Patient", ThisKey="PatientId", OtherKey="Id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.SellReceipts.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.SellReceipts.Add(this);
						this._PatientId = value.Id;
					}
					else
					{
						this._PatientId = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SellReceiptDetails(SellReceiptDetail entity)
		{
			this.SendPropertyChanging();
			entity.SellReceipt = this;
		}
		
		private void detach_SellReceiptDetails(SellReceiptDetail entity)
		{
			this.SendPropertyChanging();
			entity.SellReceipt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicineDetails")]
	public partial class MedicineDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private int _Quantity;
		
		private float _UnitPrice;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ExpirationDate;
		
		private string _MedicineId;
		
		private string _MedicineSupplierId;
		
		private string _MedicineInvoiceId;
		
		private EntityRef<MedicineInvoice> _MedicineInvoice;
		
		private EntityRef<Medicine> _Medicine;
		
		private EntityRef<MedicineSupplier> _MedicineSupplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnUnitPriceChanging(float value);
    partial void OnUnitPriceChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    partial void OnMedicineIdChanging(string value);
    partial void OnMedicineIdChanged();
    partial void OnMedicineSupplierIdChanging(string value);
    partial void OnMedicineSupplierIdChanged();
    partial void OnMedicineInvoiceIdChanging(string value);
    partial void OnMedicineInvoiceIdChanged();
    #endregion
		
		public MedicineDetail()
		{
			this._MedicineInvoice = default(EntityRef<MedicineInvoice>);
			this._Medicine = default(EntityRef<Medicine>);
			this._MedicineSupplier = default(EntityRef<MedicineSupplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Real NOT NULL")]
		public float UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineId", DbType="NVarChar(128)")]
		public string MedicineId
		{
			get
			{
				return this._MedicineId;
			}
			set
			{
				if ((this._MedicineId != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineId = value;
					this.SendPropertyChanged("MedicineId");
					this.OnMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineSupplierId", DbType="NVarChar(128)")]
		public string MedicineSupplierId
		{
			get
			{
				return this._MedicineSupplierId;
			}
			set
			{
				if ((this._MedicineSupplierId != value))
				{
					if (this._MedicineSupplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicineSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineSupplierId = value;
					this.SendPropertyChanged("MedicineSupplierId");
					this.OnMedicineSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineInvoiceId", DbType="NVarChar(128)")]
		public string MedicineInvoiceId
		{
			get
			{
				return this._MedicineInvoiceId;
			}
			set
			{
				if ((this._MedicineInvoiceId != value))
				{
					if (this._MedicineInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicineInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineInvoiceId = value;
					this.SendPropertyChanged("MedicineInvoiceId");
					this.OnMedicineInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicineInvoice_MedicineDetail", Storage="_MedicineInvoice", ThisKey="MedicineInvoiceId", OtherKey="Id", IsForeignKey=true)]
		public MedicineInvoice MedicineInvoice
		{
			get
			{
				return this._MedicineInvoice.Entity;
			}
			set
			{
				MedicineInvoice previousValue = this._MedicineInvoice.Entity;
				if (((previousValue != value) 
							|| (this._MedicineInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicineInvoice.Entity = null;
						previousValue.MedicineDetails.Remove(this);
					}
					this._MedicineInvoice.Entity = value;
					if ((value != null))
					{
						value.MedicineDetails.Add(this);
						this._MedicineInvoiceId = value.Id;
					}
					else
					{
						this._MedicineInvoiceId = default(string);
					}
					this.SendPropertyChanged("MedicineInvoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_MedicineDetail", Storage="_Medicine", ThisKey="MedicineId", OtherKey="Id", IsForeignKey=true)]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.MedicineDetails.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.MedicineDetails.Add(this);
						this._MedicineId = value.Id;
					}
					else
					{
						this._MedicineId = default(string);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicineSupplier_MedicineDetail", Storage="_MedicineSupplier", ThisKey="MedicineSupplierId", OtherKey="Id", IsForeignKey=true)]
		public MedicineSupplier MedicineSupplier
		{
			get
			{
				return this._MedicineSupplier.Entity;
			}
			set
			{
				MedicineSupplier previousValue = this._MedicineSupplier.Entity;
				if (((previousValue != value) 
							|| (this._MedicineSupplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicineSupplier.Entity = null;
						previousValue.MedicineDetails.Remove(this);
					}
					this._MedicineSupplier.Entity = value;
					if ((value != null))
					{
						value.MedicineDetails.Add(this);
						this._MedicineSupplierId = value.Id;
					}
					else
					{
						this._MedicineSupplierId = default(string);
					}
					this.SendPropertyChanged("MedicineSupplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicineInvoices")]
	public partial class MedicineInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private System.DateTime _CreationDate;
		
		private string _EmployeeId;
		
		private EntitySet<MedicineDetail> _MedicineDetails;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnEmployeeIdChanging(string value);
    partial void OnEmployeeIdChanged();
    #endregion
		
		public MedicineInvoice()
		{
			this._MedicineDetails = new EntitySet<MedicineDetail>(new Action<MedicineDetail>(this.attach_MedicineDetails), new Action<MedicineDetail>(this.detach_MedicineDetails));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicineInvoice_MedicineDetail", Storage="_MedicineDetails", ThisKey="Id", OtherKey="MedicineInvoiceId")]
		public EntitySet<MedicineDetail> MedicineDetails
		{
			get
			{
				return this._MedicineDetails;
			}
			set
			{
				this._MedicineDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_MedicineInvoice", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.MedicineInvoices.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.MedicineInvoices.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.MedicineInvoice = this;
		}
		
		private void detach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.MedicineInvoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicines")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private float _SellPrice;
		
		private EntitySet<MedicineDetail> _MedicineDetails;
		
		private EntitySet<PatientPrescriptionMedicine> _PatientPrescriptionMedicines;
		
		private EntitySet<SellReceiptDetail> _SellReceiptDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSellPriceChanging(float value);
    partial void OnSellPriceChanged();
    #endregion
		
		public Medicine()
		{
			this._MedicineDetails = new EntitySet<MedicineDetail>(new Action<MedicineDetail>(this.attach_MedicineDetails), new Action<MedicineDetail>(this.detach_MedicineDetails));
			this._PatientPrescriptionMedicines = new EntitySet<PatientPrescriptionMedicine>(new Action<PatientPrescriptionMedicine>(this.attach_PatientPrescriptionMedicines), new Action<PatientPrescriptionMedicine>(this.detach_PatientPrescriptionMedicines));
			this._SellReceiptDetails = new EntitySet<SellReceiptDetail>(new Action<SellReceiptDetail>(this.attach_SellReceiptDetails), new Action<SellReceiptDetail>(this.detach_SellReceiptDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellPrice", DbType="Real NOT NULL")]
		public float SellPrice
		{
			get
			{
				return this._SellPrice;
			}
			set
			{
				if ((this._SellPrice != value))
				{
					this.OnSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SellPrice = value;
					this.SendPropertyChanged("SellPrice");
					this.OnSellPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_MedicineDetail", Storage="_MedicineDetails", ThisKey="Id", OtherKey="MedicineId")]
		public EntitySet<MedicineDetail> MedicineDetails
		{
			get
			{
				return this._MedicineDetails;
			}
			set
			{
				this._MedicineDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_PatientPrescriptionMedicine", Storage="_PatientPrescriptionMedicines", ThisKey="Id", OtherKey="MedicineId")]
		public EntitySet<PatientPrescriptionMedicine> PatientPrescriptionMedicines
		{
			get
			{
				return this._PatientPrescriptionMedicines;
			}
			set
			{
				this._PatientPrescriptionMedicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_SellReceiptDetail", Storage="_SellReceiptDetails", ThisKey="Id", OtherKey="MedicineId")]
		public EntitySet<SellReceiptDetail> SellReceiptDetails
		{
			get
			{
				return this._SellReceiptDetails;
			}
			set
			{
				this._SellReceiptDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
		
		private void attach_PatientPrescriptionMedicines(PatientPrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_PatientPrescriptionMedicines(PatientPrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
		
		private void attach_SellReceiptDetails(SellReceiptDetail entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_SellReceiptDetails(SellReceiptDetail entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicineSuppliers")]
	public partial class MedicineSupplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private string _PhoneNumber;
		
		private EntitySet<MedicineDetail> _MedicineDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public MedicineSupplier()
		{
			this._MedicineDetails = new EntitySet<MedicineDetail>(new Action<MedicineDetail>(this.attach_MedicineDetails), new Action<MedicineDetail>(this.detach_MedicineDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicineSupplier_MedicineDetail", Storage="_MedicineDetails", ThisKey="Id", OtherKey="MedicineSupplierId")]
		public EntitySet<MedicineDetail> MedicineDetails
		{
			get
			{
				return this._MedicineDetails;
			}
			set
			{
				this._MedicineDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.MedicineSupplier = this;
		}
		
		private void detach_MedicineDetails(MedicineDetail entity)
		{
			this.SendPropertyChanging();
			entity.MedicineSupplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientPrescriptionMedicines")]
	public partial class PatientPrescriptionMedicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MedicineId;
		
		private string _PatientPrescriptionId;
		
		private int _OneDayQuantity;
		
		private string _Description;
		
		private EntityRef<Medicine> _Medicine;
		
		private EntityRef<PatientPrescription> _PatientPrescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicineIdChanging(string value);
    partial void OnMedicineIdChanged();
    partial void OnPatientPrescriptionIdChanging(string value);
    partial void OnPatientPrescriptionIdChanged();
    partial void OnOneDayQuantityChanging(int value);
    partial void OnOneDayQuantityChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PatientPrescriptionMedicine()
		{
			this._Medicine = default(EntityRef<Medicine>);
			this._PatientPrescription = default(EntityRef<PatientPrescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MedicineId
		{
			get
			{
				return this._MedicineId;
			}
			set
			{
				if ((this._MedicineId != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineId = value;
					this.SendPropertyChanged("MedicineId");
					this.OnMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientPrescriptionId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PatientPrescriptionId
		{
			get
			{
				return this._PatientPrescriptionId;
			}
			set
			{
				if ((this._PatientPrescriptionId != value))
				{
					if (this._PatientPrescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientPrescriptionIdChanging(value);
					this.SendPropertyChanging();
					this._PatientPrescriptionId = value;
					this.SendPropertyChanged("PatientPrescriptionId");
					this.OnPatientPrescriptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OneDayQuantity", DbType="Int NOT NULL")]
		public int OneDayQuantity
		{
			get
			{
				return this._OneDayQuantity;
			}
			set
			{
				if ((this._OneDayQuantity != value))
				{
					this.OnOneDayQuantityChanging(value);
					this.SendPropertyChanging();
					this._OneDayQuantity = value;
					this.SendPropertyChanged("OneDayQuantity");
					this.OnOneDayQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_PatientPrescriptionMedicine", Storage="_Medicine", ThisKey="MedicineId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.PatientPrescriptionMedicines.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.PatientPrescriptionMedicines.Add(this);
						this._MedicineId = value.Id;
					}
					else
					{
						this._MedicineId = default(string);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientPrescription_PatientPrescriptionMedicine", Storage="_PatientPrescription", ThisKey="PatientPrescriptionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PatientPrescription PatientPrescription
		{
			get
			{
				return this._PatientPrescription.Entity;
			}
			set
			{
				PatientPrescription previousValue = this._PatientPrescription.Entity;
				if (((previousValue != value) 
							|| (this._PatientPrescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientPrescription.Entity = null;
						previousValue.PatientPrescriptionMedicines.Remove(this);
					}
					this._PatientPrescription.Entity = value;
					if ((value != null))
					{
						value.PatientPrescriptionMedicines.Add(this);
						this._PatientPrescriptionId = value.Id;
					}
					else
					{
						this._PatientPrescriptionId = default(string);
					}
					this.SendPropertyChanged("PatientPrescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientPrescriptions")]
	public partial class PatientPrescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _DiseaseName;
		
		private string _PatientId;
		
		private EntitySet<PatientPrescriptionMedicine> _PatientPrescriptionMedicines;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnDiseaseNameChanging(string value);
    partial void OnDiseaseNameChanged();
    partial void OnPatientIdChanging(string value);
    partial void OnPatientIdChanged();
    #endregion
		
		public PatientPrescription()
		{
			this._PatientPrescriptionMedicines = new EntitySet<PatientPrescriptionMedicine>(new Action<PatientPrescriptionMedicine>(this.attach_PatientPrescriptionMedicines), new Action<PatientPrescriptionMedicine>(this.detach_PatientPrescriptionMedicines));
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseName
		{
			get
			{
				return this._DiseaseName;
			}
			set
			{
				if ((this._DiseaseName != value))
				{
					this.OnDiseaseNameChanging(value);
					this.SendPropertyChanging();
					this._DiseaseName = value;
					this.SendPropertyChanged("DiseaseName");
					this.OnDiseaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="NVarChar(128)")]
		public string PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientPrescription_PatientPrescriptionMedicine", Storage="_PatientPrescriptionMedicines", ThisKey="Id", OtherKey="PatientPrescriptionId")]
		public EntitySet<PatientPrescriptionMedicine> PatientPrescriptionMedicines
		{
			get
			{
				return this._PatientPrescriptionMedicines;
			}
			set
			{
				this._PatientPrescriptionMedicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientPrescription", Storage="_Patient", ThisKey="PatientId", OtherKey="Id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.PatientPrescriptions.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.PatientPrescriptions.Add(this);
						this._PatientId = value.Id;
					}
					else
					{
						this._PatientId = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientPrescriptionMedicines(PatientPrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.PatientPrescription = this;
		}
		
		private void detach_PatientPrescriptionMedicines(PatientPrescriptionMedicine entity)
		{
			this.SendPropertyChanging();
			entity.PatientPrescription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _FullName;
		
		private string _PhoneNumber;
		
		private string _Gender;
		
		private System.DateTime _BirthDate;
		
		private EntitySet<SellReceipt> _SellReceipts;
		
		private EntitySet<PatientPrescription> _PatientPrescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    #endregion
		
		public Patient()
		{
			this._SellReceipts = new EntitySet<SellReceipt>(new Action<SellReceipt>(this.attach_SellReceipts), new Action<SellReceipt>(this.detach_SellReceipts));
			this._PatientPrescriptions = new EntitySet<PatientPrescription>(new Action<PatientPrescription>(this.attach_PatientPrescriptions), new Action<PatientPrescription>(this.detach_PatientPrescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_SellReceipt", Storage="_SellReceipts", ThisKey="Id", OtherKey="PatientId")]
		public EntitySet<SellReceipt> SellReceipts
		{
			get
			{
				return this._SellReceipts;
			}
			set
			{
				this._SellReceipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientPrescription", Storage="_PatientPrescriptions", ThisKey="Id", OtherKey="PatientId")]
		public EntitySet<PatientPrescription> PatientPrescriptions
		{
			get
			{
				return this._PatientPrescriptions;
			}
			set
			{
				this._PatientPrescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SellReceipts(SellReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_SellReceipts(SellReceipt entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_PatientPrescriptions(PatientPrescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_PatientPrescriptions(PatientPrescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SellReceiptDetails")]
	public partial class SellReceiptDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private int _Quantity;
		
		private string _SellReceiptId;
		
		private string _MedicineId;
		
		private EntityRef<Medicine> _Medicine;
		
		private EntityRef<SellReceipt> _SellReceipt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnSellReceiptIdChanging(string value);
    partial void OnSellReceiptIdChanged();
    partial void OnMedicineIdChanging(string value);
    partial void OnMedicineIdChanged();
    #endregion
		
		public SellReceiptDetail()
		{
			this._Medicine = default(EntityRef<Medicine>);
			this._SellReceipt = default(EntityRef<SellReceipt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellReceiptId", DbType="NVarChar(128)")]
		public string SellReceiptId
		{
			get
			{
				return this._SellReceiptId;
			}
			set
			{
				if ((this._SellReceiptId != value))
				{
					if (this._SellReceipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellReceiptIdChanging(value);
					this.SendPropertyChanging();
					this._SellReceiptId = value;
					this.SendPropertyChanged("SellReceiptId");
					this.OnSellReceiptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineId", DbType="NVarChar(128)")]
		public string MedicineId
		{
			get
			{
				return this._MedicineId;
			}
			set
			{
				if ((this._MedicineId != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicineIdChanging(value);
					this.SendPropertyChanging();
					this._MedicineId = value;
					this.SendPropertyChanged("MedicineId");
					this.OnMedicineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_SellReceiptDetail", Storage="_Medicine", ThisKey="MedicineId", OtherKey="Id", IsForeignKey=true)]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.SellReceiptDetails.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.SellReceiptDetails.Add(this);
						this._MedicineId = value.Id;
					}
					else
					{
						this._MedicineId = default(string);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellReceipt_SellReceiptDetail", Storage="_SellReceipt", ThisKey="SellReceiptId", OtherKey="Id", IsForeignKey=true)]
		public SellReceipt SellReceipt
		{
			get
			{
				return this._SellReceipt.Entity;
			}
			set
			{
				SellReceipt previousValue = this._SellReceipt.Entity;
				if (((previousValue != value) 
							|| (this._SellReceipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellReceipt.Entity = null;
						previousValue.SellReceiptDetails.Remove(this);
					}
					this._SellReceipt.Entity = value;
					if ((value != null))
					{
						value.SellReceiptDetails.Add(this);
						this._SellReceiptId = value.Id;
					}
					else
					{
						this._SellReceiptId = default(string);
					}
					this.SendPropertyChanged("SellReceipt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
